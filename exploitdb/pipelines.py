# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html
from exploitdb.items import ExploitdbItem
import pymysql

class MysqlPipeline(object):
    def __init__(self, host, db, port, user, password):
        self.host = host
        self.db = db
        self.port = port
        self.user = user
        self.password = password

    @classmethod
    def from_crawler(cls, crawler):
        return cls(
            host=crawler.settings.get('MYSQL_HOST'),
            db=crawler.settings.get('MYSQL_DB'),
            port=crawler.settings.get('MYSQL_PORT'),
            user=crawler.settings.get('MYSQL_USER'),
            password=crawler.settings.get('MYSQL_PASSWORD')
        )

    def open_spider(self,spider):
        self.connection=pymysql.connect(self.host,self.user,self.password,self.db,charset='utf8')
        self.cursor=self.connection.cursor()
        spider.mysqlPipeline=self       # 把 pipeline绑定到 spider，方便spider调用 pipeline的 idExist函数

    def close_spider(self,spider):
        self.connection.close()

    def process_item(self, item, spider):
        if isinstance(item, ExploitdbItem):
            data = dict(item)
            keys = ','.join(data.keys())
            values = ','.join(['%s'] * len(data))
            sql = 'insert into exploit({}) values({})'.format(keys,values)      # 根据 item内容动态生成 sql语句
            for key in item:
                if item[key] is None:
                    print(item[key]+'is None__________________')
            self.cursor.execute(sql,tuple(data.values()))
            self.connection.commit()
            return item

    def idExist(self,id):
        print('id='+id)
        self.cursor.execute('select EDB_ID from exploit where EDB_ID=%s', (id,))
        if self.cursor.rowcount > 0:
            # print('id={}已存在'.format(id))
            return True
        return False
